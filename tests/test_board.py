import sys, os

sys.path.append(os.path.join(os.path.dirname(__file__), "..", "src"))
from othello.board import BitBoard


def mask_from_ascii(board_str: str) -> int:
    """Return bit mask represented by any non-dot character in ``board_str``."""
    lines = [line.strip() for line in board_str.strip().splitlines()]
    mask = 0
    for r, line in enumerate(lines):
        for c, ch in enumerate(line):
            if ch != '.':
                bit = 1 << (63 - (r * 8 + c))
                mask |= bit
    return mask


def test_initial_setup():
    b = BitBoard.initial()
    expected = BitBoard.from_ascii(
        """
........
........
........
...WB...
...BW...
........
........
........
"""
    )
    assert b == expected


def test_legal_moves_initial():
    b = BitBoard.initial()
    moves = b.legal_moves(b.black, b.white)
    expected = mask_from_ascii(
        """
........
........
...X....
..X.....
.....X..
....X...
........
........
"""
    )
    assert moves == expected


def test_apply_move():
    b = BitBoard.initial()
    move = 1 << (63-19)  # c4
    new_b = b.apply_move(move, True)
    expected = BitBoard.from_ascii(
        """
........
........
...B....
...BB...
...BW...
........
........
........
"""
    )
    assert new_b == expected
